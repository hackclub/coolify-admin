# Database configuration
# Uses PostgreSQL when DATABASE_URL is set (Docker environment)
# Falls back to SQLite for local development

default: &default
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  primary:
    <% if ENV['DATABASE_URL'].present? %>
    adapter: postgresql
    encoding: unicode
    url: <%= ENV['DATABASE_URL'] %>
    <% else %>
    adapter: sqlite3
    database: storage/development.sqlite3
    <% end %>
  queue:
    <% if ENV['DATABASE_URL'].present? %>
    adapter: postgresql
    encoding: unicode
    url: <%= ENV.fetch('QUEUE_DATABASE_URL') { ENV['DATABASE_URL'].sub(/\/coolify_admin_development/, '/coolify_admin_development_queue') } %>
    migrations_paths: db/queue_migrate
    <% else %>
    adapter: sqlite3
    database: storage/development_queue.sqlite3
    migrations_paths: db/queue_migrate
    <% end %>

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *default
    adapter: sqlite3
    database: storage/test.sqlite3
  queue:
    <<: *default
    adapter: sqlite3
    database: storage/test_queue.sqlite3
    migrations_paths: db/queue_migrate


# Store production database in the storage/ directory, which by default
# is mounted as a persistent Docker volume in config/deploy.yml.
production:
  primary:
    <<: *default
    adapter: postgresql
    encoding: unicode
    url: <%= ENV.fetch('DATABASE_URL') %>
  cache:
    <<: *default
    adapter: postgresql
    encoding: unicode
    url: <%= ENV.fetch('CACHE_DATABASE_URL') { ENV['DATABASE_URL'].sub(/\/(\w+)$/, '/\1_cache') } %>
    migrations_paths: db/cache_migrate
  queue:
    <<: *default
    adapter: postgresql
    encoding: unicode
    url: <%= ENV.fetch('QUEUE_DATABASE_URL') { ENV['DATABASE_URL'].sub(/\/(\w+)$/, '/\1_queue') } %>
    migrations_paths: db/queue_migrate
  cable:
    <<: *default
    adapter: postgresql
    encoding: unicode
    url: <%= ENV.fetch('CABLE_DATABASE_URL') { ENV['DATABASE_URL'].sub(/\/(\w+)$/, '/\1_cable') } %>
    migrations_paths: db/cable_migrate
