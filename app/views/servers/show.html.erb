<div class="resource-detail-page">
  <!-- Server Header -->
  <div class="resource-detail-header">
    <div class="resource-header-left">
      <div class="resource-breadcrumb">
        <%= link_to "‚Üê Back to Overview", root_path, class: "back-link" %>
      </div>
      <h1><%= @server.name %></h1>
      <div class="resource-meta-row">
        <% if @server.is_reachable %>
          <span class="status-badge running">Reachable</span>
        <% else %>
          <span class="status-badge stopped">Unreachable</span>
        <% end %>
        <span class="resource-type-badge server">Server</span>
        <% if @server.proxy_type.present? && @server.proxy_type != 'none' %>
          <span class="badge badge-info"><%= @server.proxy_type %></span>
        <% end %>
      </div>
      <div class="resource-meta-row">
        <span class="text-muted"><%= @server.ip %>:<%= @server.port %> (<%= @server.user %>)</span>
        <span class="text-muted">‚Ä¢ <%= @resources_count %> resources</span>
      </div>
      
      <!-- Server Specs -->
      <% if @latest_stat %>
        <div class="server-specs-summary">
          <% if @server.cpu_cores %>
            <div class="spec-item">
              <span class="spec-icon">‚ö°</span>
              <span class="spec-label">vCPUs:</span>
              <strong><%= @server.cpu_cores %> cores</strong>
            </div>
          <% end %>
          <% if @latest_stat.mem_used_bytes && @latest_stat.mem_pct && @latest_stat.mem_pct > 0 %>
            <% total_ram = (@latest_stat.mem_used_bytes / (@latest_stat.mem_pct / 100.0)).round %>
            <div class="spec-item">
              <span class="spec-icon">üß†</span>
              <span class="spec-label">RAM:</span>
              <strong><%= format_bytes(total_ram) %></strong>
            </div>
          <% end %>
          <% if @latest_stat.disk_total_bytes %>
            <div class="spec-item">
              <span class="spec-icon">üíæ</span>
              <span class="spec-label">Storage:</span>
              <strong><%= format_bytes(@latest_stat.disk_total_bytes) %></strong>
            </div>
          <% end %>
          <% if @latest_stat.filesystems.present? %>
            <% local_filesystems(@latest_stat).each do |fs| %>
              <% if fs['total_bytes'] && fs['total_bytes'] > 0 %>
                <div class="spec-item">
                  <span class="spec-icon">üìÅ</span>
                  <span class="spec-label"><%= fs['device'] %>:</span>
                  <strong><%= format_bytes(fs['total_bytes']) %></strong>
                </div>
              <% end %>
            <% end %>
          <% end %>
        </div>
      <% end %>
      <% if @latest_stat %>
        <div class="last-updated">
          Last updated: <%= time_ago_in_words(@latest_stat.captured_at) %> ago
        </div>
      <% end %>
    </div>
    <div class="resource-header-actions">
      <%= button_tag "üîÑ Refresh", 
          onclick: "window.location.reload()", 
          class: "btn btn-secondary" %>
      <% if @server.private_key.present? %>
        <% begin %>
          <% if @server.private_key.private_key.present? %>
            <button class="btn btn-primary" data-action="collect-server-stats" data-server-id="<%= @server.id %>">
              üìä Collect Stats Now
            </button>
          <% end %>
        <% rescue ActiveRecord::Encryption::Errors::Decryption %>
          <%# SSH key exists but can't be decrypted in this environment %>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Time Range Selector -->
  <div class="time-range-selector">
    <label>Time Range:</label>
    <div class="time-range-buttons">
      <%= link_to "1h", server_path(@server, time_range: '1h'), 
          class: "time-btn #{@time_range == '1h' ? 'active' : ''}" %>
      <%= link_to "6h", server_path(@server, time_range: '6h'), 
          class: "time-btn #{@time_range == '6h' ? 'active' : ''}" %>
      <%= link_to "24h", server_path(@server, time_range: '24h'), 
          class: "time-btn #{@time_range == '24h' ? 'active' : ''}" %>
      <%= link_to "7d", server_path(@server, time_range: '7d'), 
          class: "time-btn #{@time_range == '7d' ? 'active' : ''}" %>
      <%= link_to "30d", server_path(@server, time_range: '30d'), 
          class: "time-btn #{@time_range == '30d' ? 'active' : ''}" %>
    </div>
  </div>

  <% if @stats.empty? %>
    <div class="empty-state-detail">
      <div class="empty-state-icon">üìä</div>
      <h3>No Statistics Available Yet</h3>
      <p>Stats are collected automatically every few minutes.</p>
      <p>Once metrics are collected, you'll see beautiful charts and historical data here.</p>
      <% has_ssh_key = false %>
      <% if @server.private_key.present? %>
        <% begin %>
          <% has_ssh_key = @server.private_key.private_key.present? %>
        <% rescue ActiveRecord::Encryption::Errors::Decryption %>
          <%# SSH key exists but can't be decrypted in this environment %>
          <% has_ssh_key = true %>
        <% end %>
      <% end %>
      <% if has_ssh_key %>
        <button class="btn btn-primary" data-action="collect-server-stats" data-server-id="<%= @server.id %>">
          üìä Collect Stats Now
        </button>
      <% else %>
        <p class="text-muted">Add an SSH key to start collecting metrics.</p>
      <% end %>
      <%= link_to "‚Üê Back to Overview", root_path, class: "btn btn-secondary" %>
    </div>
  <% else %>
    <!-- Stats Summary Cards -->
    <div class="stats-summary-grid">
      <div class="stat-summary-card cpu-card">
        <div class="stat-card-header">
          <span class="stat-icon">‚ö°</span>
          <div class="stat-summary-label">CPU Usage</div>
        </div>
        <div class="stat-summary-value"><%= @latest_stat&.cpu_pct&.round(1) || 0 %>%</div>
        <% if @stats_summary[:cpu_avg] %>
          <div class="stat-summary-meta">
            Avg: <%= @stats_summary[:cpu_avg] %>% | 
            Max: <%= @stats_summary[:cpu_max]&.round(1) %>% | 
            Min: <%= @stats_summary[:cpu_min]&.round(1) %>%
          </div>
        <% end %>
      </div>

      <div class="stat-summary-card memory-card">
        <div class="stat-card-header">
          <span class="stat-icon">üß†</span>
          <div class="stat-summary-label">Memory Usage</div>
        </div>
        <div class="stat-summary-value">
          <%= format_bytes(@latest_stat&.mem_used_bytes || 0) %>
        </div>
        <% if @latest_stat&.mem_pct %>
          <div class="stat-summary-meta">
            <%= @latest_stat.mem_pct.round(1) %>% used
            <% if @stats_summary[:mem_avg] %>
              | Avg: <%= format_bytes(@stats_summary[:mem_avg]) %>
            <% end %>
          </div>
        <% end %>
      </div>

      <div class="stat-summary-card disk-card">
        <div class="stat-card-header">
          <span class="stat-icon">üíæ</span>
          <div class="stat-summary-label">Disk Usage</div>
        </div>
        <div class="stat-summary-value">
          <%= format_bytes(@latest_stat&.disk_used_bytes || 0) %>
        </div>
        <% if @latest_stat&.disk_total_bytes %>
          <div class="stat-summary-meta">
            <%= format_bytes(@latest_stat.disk_total_bytes) %> total
            <% if @latest_stat.disk_used_bytes && @latest_stat.disk_total_bytes > 0 %>
              (<%= ((@latest_stat.disk_used_bytes.to_f / @latest_stat.disk_total_bytes) * 100).round(1) %>%)
            <% end %>
          </div>
        <% end %>
      </div>

      <div class="stat-summary-card load-card">
        <div class="stat-card-header">
          <span class="stat-icon">üìà</span>
          <div class="stat-summary-label">Load Average</div>
        </div>
        <div class="stat-summary-value">
          <%= @latest_stat&.load1&.round(2) || 'N/A' %>
        </div>
        <% if @latest_stat&.load1 %>
          <div class="stat-summary-meta">
            1m: <%= @latest_stat.load1.round(2) %> | 
            5m: <%= @latest_stat.load5&.round(2) %> | 
            15m: <%= @latest_stat.load15&.round(2) %>
            <% if @server.cpu_cores %>
              <br>(<%= ((@latest_stat.load1 / @server.cpu_cores) * 100).round(0) %>% of <%= @server.cpu_cores %> cores)
            <% end %>
          </div>
        <% end %>
      </div>

      <div class="stat-summary-card iops-card">
        <div class="stat-card-header">
          <span class="stat-icon">üíø</span>
          <div class="stat-summary-label">IOPS</div>
        </div>
        <div class="stat-summary-value">
          <% if @latest_stat&.iops_r || @latest_stat&.iops_w %>
            <%= (@latest_stat.iops_r.to_f + @latest_stat.iops_w.to_f).round(1) %>
          <% else %>
            N/A
          <% end %>
        </div>
        <% if @latest_stat&.iops_r || @latest_stat&.iops_w %>
          <div class="stat-summary-meta">
            Read: <%= @latest_stat.iops_r&.round(1) || 0 %> | 
            Write: <%= @latest_stat.iops_w&.round(1) || 0 %>
          </div>
        <% end %>
      </div>

      <div class="stat-summary-card data-card">
        <div class="stat-card-header">
          <span class="stat-icon">üìä</span>
          <div class="stat-summary-label">Data Points</div>
        </div>
        <div class="stat-summary-value"><%= @stats_summary[:data_points] %></div>
        <div class="stat-summary-meta">
          Over <%= @time_range %>
        </div>
      </div>
    </div>

    <!-- Charts Grid -->
    <div class="charts-grid">
      <!-- CPU Chart -->
      <div class="chart-container">
        <h3>CPU Usage Over Time
          <% if @server.cpu_cores %>
            <span class="chart-spec">(<%= @server.cpu_cores %> vCPUs)</span>
          <% end %>
        </h3>
        <canvas id="cpuChart"></canvas>
      </div>

      <!-- Memory Chart -->
      <div class="chart-container">
        <h3>Memory Usage Over Time
          <% if @latest_stat&.mem_used_bytes && @latest_stat&.mem_pct && @latest_stat.mem_pct > 0 %>
            <% total_ram = (@latest_stat.mem_used_bytes / (@latest_stat.mem_pct / 100.0)).round %>
            <span class="chart-spec">(Total: <%= format_bytes(total_ram) %>)</span>
          <% end %>
        </h3>
        <canvas id="memoryChart"></canvas>
      </div>

      <!-- Disk Chart -->
      <div class="chart-container">
        <h3>Disk Usage Over Time
          <% if @latest_stat&.disk_total_bytes %>
            <span class="chart-spec">(Capacity: <%= format_bytes(@latest_stat.disk_total_bytes) %>)</span>
          <% end %>
        </h3>
        <canvas id="diskChart"></canvas>
      </div>

      <!-- Load Average Chart -->
      <div class="chart-container">
        <h3>Load Average Over Time
          <% if @server.cpu_cores %>
            <span class="chart-spec">(Max sustainable load: <%= @server.cpu_cores %>)</span>
          <% end %>
        </h3>
        <canvas id="loadChart"></canvas>
      </div>

      <!-- IOPS Chart -->
      <div class="chart-container">
        <h3>IOPS Over Time</h3>
        <canvas id="iopsChart"></canvas>
      </div>

      <!-- Combined Overview Chart -->
      <div class="chart-container">
        <h3>Combined Overview</h3>
        <canvas id="overviewChart"></canvas>
      </div>
    </div>
  <% end %>

  <% unless @stats.empty? %>
    <!-- Historical Stats Table -->
    <div class="historical-stats-section">
      <h2>Recent Statistics (<%= @stats.count %> data points)</h2>
      <div class="stats-table-container">
        <table class="stats-table">
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>CPU</th>
              <th>Memory</th>
              <th>Disk</th>
              <th>Load (1m/5m/15m)</th>
              <th>IOPS (R/W)</th>
            </tr>
          </thead>
          <tbody>
            <% @stats.reverse_order.first(50).each do |stat| %>
              <tr>
                <td class="timestamp-cell">
                  <%= stat.captured_at.strftime('%Y-%m-%d %H:%M:%S') %>
                </td>
                <td class="cpu-cell">
                  <% if stat.cpu_pct %>
                    <div class="stat-bar-container">
                      <div class="stat-bar cpu-bar" style="width: <%= [stat.cpu_pct, 100].min %>%"></div>
                      <span class="stat-value"><%= stat.cpu_pct.round(1) %>%</span>
                    </div>
                  <% else %>
                    <span class="text-muted">-</span>
                  <% end %>
                </td>
                <td class="memory-cell">
                  <%= format_bytes(stat.mem_used_bytes || 0) %>
                  <% if stat.mem_pct %>
                    (<%= stat.mem_pct.round(1) %>%)
                  <% end %>
                </td>
                <td>
                  <%= format_bytes(stat.disk_used_bytes || 0) %>
                  <% if stat.disk_total_bytes && stat.disk_total_bytes > 0 %>
                    / <%= format_bytes(stat.disk_total_bytes) %>
                  <% end %>
                </td>
                <td class="load-cell">
                  <%= stat.load1&.round(2) || '-' %> / 
                  <%= stat.load5&.round(2) || '-' %> / 
                  <%= stat.load15&.round(2) || '-' %>
                </td>
                <td class="iops-cell">
                  <%= stat.iops_r&.round(1) || '0' %> / 
                  <%= stat.iops_w&.round(1) || '0' %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
      <% if @stats.count > 50 %>
        <p class="table-note">Showing latest 50 of <%= @stats.count %> data points</p>
      <% end %>
    </div>
  <% end %>

  <!-- Resources on this Server -->
  <% if @projects_tree.any? %>
    <div class="resource-details-section">
      <h2>Resources on this Server (<%= @resources_count %>)</h2>
      
      <div class="tree-section">
        <% @projects_tree.each do |project, environments_hash| %>
          <div class="tree-item project-item" style="margin-bottom: 1rem;">
            <div class="item-name project-name" style="font-size: 1rem; font-weight: 600; margin-bottom: 0.5rem;">
              <%= project.name %>
            </div>
            
            <% environments_hash.each do |environment, resources| %>
              <div class="environment-item" style="margin-left: 1rem; margin-bottom: 0.5rem;">
                <div class="item-name environment-name" style="font-weight: 500; margin-bottom: 0.25rem; font-size: 0.9rem;">
                  <%= environment.name %> <span class="count" style="color: #666;">(<%= resources.count %>)</span>
                </div>
                
                <ul class="tree-list resource-list" style="list-style: none; padding: 0; margin-left: 1rem;">
                  <% resources.each do |resource| %>
                    <li class="tree-item resource-item" style="margin-bottom: 0.25rem; padding: 0.25rem 0.5rem; background: #f9fafb; border-radius: 3px;">
                      <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span class="resource-type-badge <%= resource.type.downcase %>" style="padding: 0.1rem 0.4rem; border-radius: 2px; font-size: 0.7rem; font-weight: 500;">
                          <%= resource.type.sub('Coolify', '').downcase %>
                        </span>
                        <div class="item-name resource-name" style="font-weight: 500; font-size: 0.9rem;">
                          <%= link_to resource.name, resource_path(resource), class: "resource-detail-link" %>
                          <% if resource.status %>
                            <span class="status <%= resource.status.include?('running') ? 'ok' : 'err' %>" style="margin-left: 0.5rem; font-size: 0.75rem;">
                              <%= resource.status %>
                            </span>
                          <% end %>
                        </div>
                      </div>
                      <% if resource.fqdn.present? %>
                        <div style="font-size: 0.75rem; color: #666; margin-left: 0.25rem; margin-top: 0.1rem;">
                          <%= resource.fqdn %>
                        </div>
                      <% end %>
                      <% if (rstat = @latest_resource_stats[resource.id]) %>
                        <div class="resource-stats" style="font-size: 0.75rem; color: #666; margin-top: 0.1rem;">
                          CPU: <%= rstat.cpu_pct&.round(1) %>% ‚Ä¢ MEM: <%= format_memory_stat(rstat) %> ‚Ä¢ DISK: <%= format_bytes([rstat.disk_persistent_bytes, rstat.disk_runtime_bytes].compact.sum) %>
                        </div>
                      <% end %>
                    </li>
                  <% end %>
                </ul>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  <% else %>
    <div class="resource-details-section">
      <h2>Resources on this Server</h2>
      <p class="text-muted" style="padding: 1rem 0;">No resources found on this server.</p>
    </div>
  <% end %>

  <!-- Server Details Section -->
  <div class="resource-details-section">
    <h2>Server Details</h2>
    
    <div class="details-grid">
      <div class="detail-group">
        <h3>Connection Information</h3>
        <dl class="detail-list">
          <dt>Name</dt>
          <dd><%= @server.name %></dd>
          
          <dt>IP Address</dt>
          <dd class="monospace"><%= @server.ip %></dd>
          
          <dt>Port</dt>
          <dd><%= @server.port || 22 %></dd>
          
          <dt>User</dt>
          <dd><%= @server.user %></dd>
          
          <dt>UUID</dt>
          <dd class="monospace"><%= @server.uuid %></dd>
        </dl>
      </div>

      <div class="detail-group">
        <h3>Server Status</h3>
        <dl class="detail-list">
          <dt>Reachable</dt>
          <dd>
            <% if @server.is_reachable %>
              <span class="status-badge running">Yes</span>
            <% else %>
              <span class="status-badge stopped">No</span>
            <% end %>
          </dd>
          
          <dt>Proxy Type</dt>
          <dd><%= @server.proxy_type || 'None' %></dd>
          
          <% if @server.cpu_cores %>
            <dt>CPU Cores</dt>
            <dd><%= @server.cpu_cores %></dd>
          <% end %>
          
          <dt>SSH Key</dt>
          <dd>
            <% if @server.private_key&.private_key.present? %>
              <span class="status-badge running">Configured</span>
            <% else %>
              <span class="status-badge stopped">Not configured</span>
            <% end %>
          </dd>
          
          <dt>Resources</dt>
          <dd><%= @resources_count %></dd>
        </dl>
      </div>

      <% if @server.coolify_team %>
        <div class="detail-group">
          <h3>Team</h3>
          <dl class="detail-list">
            <dt>Coolify Team</dt>
            <dd><%= @server.coolify_team.name %></dd>
            
            <% if @server.coolify_team.team_uuid.present? %>
              <dt>Team UUID</dt>
              <dd class="monospace"><%= @server.coolify_team.team_uuid %></dd>
            <% end %>
          </dl>
        </div>
      <% end %>

      <% if @latest_stat&.filesystems.present? %>
        <div class="detail-group">
          <h3>Filesystems</h3>
          <div class="filesystems-list">
            <% local_filesystems(@latest_stat).each do |fs| %>
              <div class="filesystem-item">
                <strong><%= fs['device'] %></strong>
                <div class="filesystem-details">
                  Mount: <%= fs['mountpoint'] %> | Type: <%= fs['fstype'] %>
                </div>
                <div class="filesystem-usage">
                  <%= format_bytes(fs['used_bytes']) %> / <%= format_bytes(fs['total_bytes']) %>
                  <% if fs['used_bytes'] && fs['total_bytes'] && fs['total_bytes'] > 0 %>
                    (<%= ((fs['used_bytes'].to_f / fs['total_bytes']) * 100).round(1) %>%)
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
// Handle collect stats button
document.addEventListener('DOMContentLoaded', function() {
  const collectBtn = document.querySelector('[data-action="collect-server-stats"]');
  if (collectBtn) {
    collectBtn.addEventListener('click', async function() {
      const serverId = this.getAttribute('data-server-id');
      const button = this;
      
      button.disabled = true;
      const prevText = button.textContent;
      button.textContent = '‚è≥ Collecting...';
      
      try {
        const resp = await fetch(`/servers/${serverId}/collect_stats`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        });
        const result = await resp.json();
        
        if (result.success) {
          alert('‚úÖ Stats collection started!\n\nThe page will refresh in a few seconds to show updated data.');
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        } else {
          alert(`‚ùå Failed: ${result.error}`);
          button.disabled = false;
          button.textContent = prevText;
        }
      } catch (e) {
        alert(`Network error: ${e.message}`);
        button.disabled = false;
        button.textContent = prevText;
      }
    });
  }
});
</script>

<% unless @stats.empty? %>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script>
(function() {
  // Function to initialize charts
  function initCharts() {
    if (typeof Chart === 'undefined') {
      console.error('Chart.js failed to load');
      return;
    }
  
    // Chart.js configuration
    Chart.defaults.font.family = "'SF Mono', 'Monaco', 'Consolas', monospace";
    Chart.defaults.font.size = 11;
    Chart.defaults.color = '#666';
    
    const chartData = <%= raw @chart_data.to_json %>;
    const timeRange = '<%= params[:time_range] || '24h' %>';
  
  // Calculate time range boundaries
  function getTimeRangeBounds() {
    const now = new Date();
    const timeRangeMap = {
      '1h': 1 * 60 * 60 * 1000,
      '6h': 6 * 60 * 60 * 1000,
      '24h': 24 * 60 * 60 * 1000,
      '7d': 7 * 24 * 60 * 60 * 1000,
      '30d': 30 * 24 * 60 * 60 * 1000
    };
    
    const milliseconds = timeRangeMap[timeRange] || timeRangeMap['24h'];
    const startTime = new Date(now - milliseconds);
    
    return {
      min: startTime,
      max: now
    };
  }
  
  const timeBounds = getTimeRangeBounds();
  
  // Format timestamp for display
  function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  }
  
  // Format bytes for display
  function formatBytes(bytes) {
    if (bytes === null || bytes === undefined) return 'N/A';
    const units = ['B', 'KB', 'MB', 'GB', 'TB'];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    return size.toFixed(2) + ' ' + units[unitIndex];
  }
  
  const commonOptions = {
    responsive: true,
    maintainAspectRatio: true,
    aspectRatio: 2.5,
    devicePixelRatio: Math.max(window.devicePixelRatio || 1, 3),
    interaction: {
      intersect: false,
      mode: 'index'
    },
    plugins: {
      legend: {
        display: true,
        position: 'top'
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        padding: 12,
        titleFont: { size: 12, weight: 'bold' },
        bodyFont: { size: 11 },
        callbacks: {
          title: function(context) {
            return formatTime(context[0].parsed.x);
          }
        }
      }
    },
    scales: {
      x: {
        type: 'time',
        min: timeBounds.min,
        max: timeBounds.max,
        time: {
          unit: '<%= @time_range == '1h' || @time_range == '6h' ? 'minute' : 'hour' %>',
          displayFormats: {
            minute: 'HH:mm',
            hour: 'MMM d, HH:mm'
          }
        },
        grid: {
          color: '#e5e7eb'
        }
      },
      y: {
        beginAtZero: true,
        grid: {
          color: '#e5e7eb'
        }
      }
    }
  };
  
  // Calculate CPU max (minimum 100, but scale higher if needed)
  const cpuMax = Math.ceil(Math.max(100, ...chartData.cpu.filter(v => v !== null).map(v => v * 1.1))); // 10% padding above max, rounded up
  
  // CPU Chart
  new Chart(document.getElementById('cpuChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [{
        label: 'CPU Usage (%)',
        data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.cpu[i] })),
        borderColor: '#ef4444',
        backgroundColor: 'rgba(239, 68, 68, 0.1)',
        fill: true,
        tension: 0.4,
        pointRadius: 2,
        pointHoverRadius: 5
      }]
    },
    options: {
      ...commonOptions,
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          max: cpuMax,
          ticks: {
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });
  
  // Memory Chart
  new Chart(document.getElementById('memoryChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [
        {
          label: 'Memory Usage',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.memory_bytes[i] })),
          borderColor: '#8b5cf6',
          backgroundColor: 'rgba(139, 92, 246, 0.1)',
          fill: true,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        }
      ]
    },
    options: {
      ...commonOptions,
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          ticks: {
            callback: function(value) {
              return formatBytes(value);
            }
          }
        }
      },
      plugins: {
        ...commonOptions.plugins,
        tooltip: {
          ...commonOptions.plugins.tooltip,
          callbacks: {
            ...commonOptions.plugins.tooltip.callbacks,
            label: function(context) {
              let label = context.dataset.label || '';
              if (label) {
                label += ': ';
              }
              if (context.parsed.y !== null) {
                label += formatBytes(context.parsed.y);
              }
              return label;
            }
          }
        }
      }
    }
  });
  
  // Disk Chart
  new Chart(document.getElementById('diskChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [
        {
          label: 'Disk Used',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.disk_used[i] })),
          borderColor: '#f59e0b',
          backgroundColor: 'rgba(245, 158, 11, 0.1)',
          fill: true,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        },
        {
          label: 'Disk Total',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.disk_total[i] })),
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.05)',
          fill: false,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5,
          borderDash: [5, 5]
        }
      ]
    },
    options: {
      ...commonOptions,
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          ticks: {
            callback: function(value) {
              return formatBytes(value);
            }
          }
        }
      },
      plugins: {
        ...commonOptions.plugins,
        tooltip: {
          ...commonOptions.plugins.tooltip,
          callbacks: {
            ...commonOptions.plugins.tooltip.callbacks,
            label: function(context) {
              let label = context.dataset.label || '';
              if (label) {
                label += ': ';
              }
              if (context.parsed.y !== null) {
                label += formatBytes(context.parsed.y);
              }
              return label;
            }
          }
        }
      }
    }
  });
  
  // Load Average Chart
  new Chart(document.getElementById('loadChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [
        {
          label: 'Load Average (1 min)',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.load1[i] })),
          borderColor: '#ef4444',
          backgroundColor: 'rgba(239, 68, 68, 0.1)',
          fill: false,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        },
        {
          label: 'Load Average (5 min)',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.load5[i] })),
          borderColor: '#f59e0b',
          backgroundColor: 'rgba(245, 158, 11, 0.1)',
          fill: false,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        },
        {
          label: 'Load Average (15 min)',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.load15[i] })),
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          fill: false,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        }
      ]
    },
    options: commonOptions
  });
  
  // IOPS Chart
  new Chart(document.getElementById('iopsChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [
        {
          label: 'Read IOPS',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.iops_read[i] })),
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          fill: true,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        },
        {
          label: 'Write IOPS',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.iops_write[i] })),
          borderColor: '#ec4899',
          backgroundColor: 'rgba(236, 72, 153, 0.1)',
          fill: true,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 5
        }
      ]
    },
    options: {
      ...commonOptions,
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          ticks: {
            callback: function(value) {
              return value.toFixed(1);
            }
          }
        }
      }
    }
  });
  
  // Combined Overview Chart - normalized metrics
  // Normalize each metric to 0-100 scale for comparison
  const normalizeArray = (arr, label) => {
    const nonNull = arr.filter(v => v !== null);
    if (nonNull.length === 0) return arr.map(() => null);
    const max = Math.max(...nonNull);
    const min = Math.min(...nonNull);
    const range = max - min;
    if (range === 0) return arr.map(v => v === null ? null : 50); // If all same, put at 50%
    return arr.map(v => v === null ? null : ((v - min) / range) * 100);
  };
  
  new Chart(document.getElementById('overviewChart'), {
    type: 'line',
    data: {
      labels: chartData.timestamps,
      datasets: [
        {
          label: 'CPU %',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.cpu[i] })),
          borderColor: '#ef4444',
          backgroundColor: 'rgba(239, 68, 68, 0.05)',
          fill: false,
          tension: 0.4,
          pointRadius: 1,
          pointHoverRadius: 4
        },
        {
          label: 'Memory % (normalized)',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: chartData.memory_pct[i] })),
          borderColor: '#8b5cf6',
          backgroundColor: 'rgba(139, 92, 246, 0.05)',
          fill: false,
          tension: 0.4,
          pointRadius: 1,
          pointHoverRadius: 4
        },
        {
          label: 'Load (normalized)',
          data: chartData.timestamps.map((t, i) => ({ x: t, y: normalizeArray(chartData.load1, 'Load')[i] })),
          borderColor: '#f59e0b',
          backgroundColor: 'rgba(245, 158, 11, 0.05)',
          fill: false,
          tension: 0.4,
          pointRadius: 1,
          pointHoverRadius: 4
        }
      ]
    },
    options: {
      ...commonOptions,
      scales: {
        ...commonOptions.scales,
        y: {
          ...commonOptions.scales.y,
          max: 100,
          ticks: {
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });
  }
  
  // Initialize charts when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCharts);
  } else {
    initCharts();
  }
})();
</script>
<% end %>

